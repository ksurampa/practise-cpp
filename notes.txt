https://learning.oreilly.com/library/view/c-primer-fifth

GCC github link: https://github.com/gcc-mirror/gcc

echo $? on UNIX
echo %ERRORLEVEL%% on Windows

g++ -o Hello HelloWorld.cpp node.cpp -Wall -std=c++0x		// C++ 11

iostream -> 1 istream and 3 ostream objects
	cin - istream
	cout - ostream
	cerr - ostream
	clog - ostream

>> & << are input and output operators
endl is manipulator also responsible for flushing the buffer to ostream along with ending the current line

Namespaces allow us to avoid inadvertant collisions between the names we define and uses of those same names inside library. All the name defined by the standard library are in the std namespace

:: -> scope operator

A block is a sequence of zero or more statments enclosed by curly braces

+= -> Compound Assignment operator

CTRL + d -> End of File in UNIX
CTRL + z -> End of File in Windows

./bookstore <infile >outfile

"."	->	Dot Operator
() 	->	Call Operator

Primitive Data types:

	Characters, integers, boolean, floating point numbers etc.,
	and special type called void

	Arithmetic types are divided into 2 categories: integral types (which include character and boolean)
	and floating-point types

Type			Meaning					Size

bool			boolean					NA
char			character				8 bits
wchar_t			wide character				16 bits
char16_t		Unicode Character			16 bits
char32_t		Unicode Character			32 bits
short			Short integer				16 bits
int			integer					32 bits (min 16 bits)
long			long integer				64 bits (min 32 bits)
long long		long integer				64 bits
float			single-precision floating-point		6 significant digits (32 bits)
double			double-precision floating point		10 significant digits (64 bits)
long double		extended-precision floating point	10 significant digits (128 bits)

Literals:

The type of string literal is array of constant char s

// multiline string literal
std::cout << "a really, really long string literal "
             "that spans two lines" << std::endl;

The language defines several escape sequences:

newline            \n     horizontal tab      \t     alert (bell)       \a
vertical tab       \v     backspace          \b     double quote  \"
backslash         \\     question mark     \?     single quote    \'
carriage return   \r     formfeed            \f

We can also write a generalized escape sequence, which is \x followed by one or more hexadecimal digits or a \ followed by one, two, or three octal digits. The value represents the numerical value of the character. Some examples (assuming the Latin-1 character set):

\7 (bell)    \12 (newline)      \40 (blank)
\0 (null)    \115 ('M')         \x4d ('M')

As with an escape sequence defined by the language, we use these escape sequences as we would any other character:

std::cout << "Hi \x4dO\115!\n";  // prints Hi MOM! followed by a newline
std::cout << '\115' << '\n';     // prints M followed by a newline

Specifying the type of a literal:

We can override the default type of an integer, floating- point, or character literal by supplying a suffix or prefix

L'a'     // wide character literal, type is wchar_t
u8"hi!"  // utf-8 string literal (utf-8 encodes a Unicode character in 8 bits)
42ULL    // unsigned integer literal, type is unsigned long long
1E-3F    // single-precision floating-point literal, type is float
3.14159L // extended-precision floating-point literal, type is long double

We can independently specify the signedness and size of an integral literal. If the suffix contains a U, then the literal has an unsigned type, so a decimal, octal, or hexadecimal literal with a U suffix has the smallest type of unsigned int, unsigned long, or unsigned long long in which the literal’s value fits. If the suffix contains an L, then the literal’s type will be at least long; if the suffix contains LL, then the literal’s type will be either long long or unsigned long long. We can combine U with either L or LL. For example, a literal with a suffix of UL will be either unsigned long or unsigned long long, depending on whether its value fits in unsigned long.

Variables:

std::string book("0-201-78345-X"); // book initialized from string literal

An object is a region of memory that has a type. We will freely use the term object regardless of whether the object has built-in or class type, is named or unnamed, or can be read or written.

Initialization is not assignment. Initialization happens when a variable is given a value when it is created. Assignment obliterates an object’s current value and replaces that value with a new one.

List Initialization:

we can use any of the following four different ways to define an int variable named units_sold and initialize it to 0:

int units_sold = 0;
int units_sold = {0};
int units_sold{0};
int units_sold(0);

The generalized use of curly braces for initialization was introduced as part of the new standard. This form of initialization previously had been allowed only in more restricted ways. For reasons we’ll learn about in § 3.3.1 (p. 98), this form of initialization is referred to as list initialization. Braced lists of initializers can now be used whenever we initialize an object and in some cases when we assign a new value to an object

In C++ 11, When used with variables of built-in type, this form of initialization has one important property: The compiler will not let us list initialize variables of built-in type if the initializer might lead to the loss of information:

long double ld = 3.1415926536;
int a{ld}, b = {ld}; // error: narrowing conversion required
int c(ld), d = ld;   // ok: but value will be truncated

Default Initialization: 

When we define a variable without an initializer, the variable is default initialized. Such variables are given the “default” value. What that default value is depends on the type of the variable and may also depend on where the variable is defined.

Variables defined outside any function body are initialized to 0. Variables of built-in type defined inside of a function are uninitialized


--------------------------------------

Inheritance (Public vs Private)
Virtual Functions
Friends
Abstract Classes
STL

--------------------------------------
