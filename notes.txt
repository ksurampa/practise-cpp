https://learning.oreilly.com/library/view/c-primer-fifth

GCC github link: https://github.com/gcc-mirror/gcc

echo $? on UNIX
echo %ERRORLEVEL%% on Windows

g++ -o Hello HelloWorld.cpp node.cpp -Wall -std=c++0x		// C++ 11

iostream -> 1 istream and 3 ostream objects
	cin - istream
	cout - ostream
	cerr - ostream
	clog - ostream

>> & << are input and output operators
endl is manipulator also responsible for flushing the buffer to ostream along with ending the current line

Namespaces allow us to avoid inadvertant collisions between the names we define and uses of those same names inside library. All the name defined by the standard library are in the std namespace

:: -> scope operator

A block is a sequence of zero or more statments enclosed by curly braces

+= -> Compound Assignment operator

CTRL + d -> End of File in UNIX
CTRL + z -> End of File in Windows

./bookstore <infile >outfile

"."	->	Dot Operator
() 	->	Call Operator

Primitive Data types:
---------------------

	Characters, integers, boolean, floating point numbers etc.,
	and special type called void

	Arithmetic types are divided into 2 categories: integral types (which include character and boolean)
	and floating-point types

Type			Meaning					Size

bool			boolean					NA
char			character				8 bits
wchar_t			wide character				16 bits
char16_t		Unicode Character			16 bits
char32_t		Unicode Character			32 bits
short			Short integer				16 bits
int			integer					32 bits (min 16 bits)
long			long integer				64 bits (min 32 bits)
long long		long integer				64 bits
float			single-precision floating-point		6 significant digits (32 bits)
double			double-precision floating point		10 significant digits (64 bits)
long double		extended-precision floating point	10 significant digits (128 bits)

Literals:
---------

The type of string literal is array of constant char s

// multiline string literal
std::cout << "a really, really long string literal "
             "that spans two lines" << std::endl;

The language defines several escape sequences:

newline            \n     horizontal tab      \t     alert (bell)       \a
vertical tab       \v     backspace          \b     double quote  \"
backslash         \\     question mark     \?     single quote    \'
carriage return   \r     formfeed            \f

We can also write a generalized escape sequence, which is \x followed by one or more hexadecimal digits or a \ followed by one, two, or three octal digits. The value represents the numerical value of the character. Some examples (assuming the Latin-1 character set):

\7 (bell)    \12 (newline)      \40 (blank)
\0 (null)    \115 ('M')         \x4d ('M')

As with an escape sequence defined by the language, we use these escape sequences as we would any other character:

std::cout << "Hi \x4dO\115!\n";  // prints Hi MOM! followed by a newline
std::cout << '\115' << '\n';     // prints M followed by a newline

Specifying the type of a literal:

We can override the default type of an integer, floating- point, or character literal by supplying a suffix or prefix

L'a'     // wide character literal, type is wchar_t
u8"hi!"  // utf-8 string literal (utf-8 encodes a Unicode character in 8 bits)
42ULL    // unsigned integer literal, type is unsigned long long
1E-3F    // single-precision floating-point literal, type is float
3.14159L // extended-precision floating-point literal, type is long double

We can independently specify the signedness and size of an integral literal. If the suffix contains a U, then the literal has an unsigned type, so a decimal, octal, or hexadecimal literal with a U suffix has the smallest type of unsigned int, unsigned long, or unsigned long long in which the literal’s value fits. If the suffix contains an L, then the literal’s type will be at least long; if the suffix contains LL, then the literal’s type will be either long long or unsigned long long. We can combine U with either L or LL. For example, a literal with a suffix of UL will be either unsigned long or unsigned long long, depending on whether its value fits in unsigned long.

Variables:
----------

std::string book("0-201-78345-X"); // book initialized from string literal

An object is a region of memory that has a type. We will freely use the term object regardless of whether the object has built-in or class type, is named or unnamed, or can be read or written.

Initialization is not assignment. Initialization happens when a variable is given a value when it is created. Assignment obliterates an object’s current value and replaces that value with a new one.

List Initialization:
--------------------

we can use any of the following four different ways to define an int variable named units_sold and initialize it to 0:

int units_sold = 0;
int units_sold = {0};
int units_sold{0};
int units_sold(0);

The generalized use of curly braces for initialization was introduced as part of the new standard. This form of initialization previously had been allowed only in more restricted ways. For reasons we’ll learn about in § 3.3.1 (p. 98), this form of initialization is referred to as list initialization. Braced lists of initializers can now be used whenever we initialize an object and in some cases when we assign a new value to an object

In C++ 11, When used with variables of built-in type, this form of initialization has one important property: The compiler will not let us list initialize variables of built-in type if the initializer might lead to the loss of information:

long double ld = 3.1415926536;
int a{ld}, b = {ld}; // error: narrowing conversion required
int c(ld), d = ld;   // ok: but value will be truncated

Default Initialization: 
-----------------------

When we define a variable without an initializer, the variable is default initialized. Such variables are given the “default” value. What that default value is depends on the type of the variable and may also depend on where the variable is defined.

Variables defined outside any function body are initialized to 0. Variables of built-in type defined inside of a function are uninitialized

C++ is a statically typed language, which means that types are checked at compile time. The process by which types are checked is referred to as type checking.

C++ Keywords:
-------------

alignas		continue	friend		register		true
alignof		decltype	goto		reinterpret_cast	try
asm		default		if		return			typedef
auto		delete		inline		short			typeid
bool		do		int		signed			typename
break		double		long		sizeof			union
case		dynamic_cast	mutable		static			unsigned
catch		else		namespace	static_assert		using
char		enum		new		static_cast		virtual
char16_t	explicit	noexcept	struct			void
char32_t	export		nullptr		switch			volatile
class		extern		operator	template		wchar_t
const		false		private		this			while
constexpr	float		protected	thread_local
const_cast	for		public		throw

C++ Alternative Operator Names

and	bitand	compl	not_eq	or_eq	xor_eq
and_eq	bitor	not	or	xor

Identifiers must begin with either a letter or an underscore

Compound Types:
---------------

References:
-----------

References are of 2 types lvalue and rvalue. rvalue reference is introduced by C++ 11 as new kinda reference. rvalue references are primarily intended for use inside classes. A "reference" in general means "lvalue reference"

A reference defines an alternative name for an object. A reference type “refers to” another type. We define a reference type by writing a declarator of the form &d, where d is the name being declared:

int ival = 1024;
int &refVal = ival;  // refVal refers to (is another name for) ival
int &refVal2;        // error: a reference must be initialized

A reference is an alias. Address of both the var and reference var when printed shall be same.

Pointers:
---------

& - address of operator
* - dereference operator
nullptr - null pointer // Introduced in C++ 11

	int *p1 = nullptr; // equivalent to int *p1 = 0;
	int *p2 = 0;       // directly initializes p2 from the literal constant 0
	// must #include cstdlib
	int *p3 = NULL;    // equivalent to int *p3 = 0;

Modern C++ programs must not use NULL, instead use nullptr

As we’ve seen, a variable definition consists of a base type and a list of declarators. Each declarator can relate its variable to the base type differently from the other declarators in the same definition. Thus, a single definition might define variables of different types:

	// i is an int; p is a pointer to int; r is a reference to int
	int i = 1024, *p = &i, &r = i;

It is a common misconception to think that the type modifier (* or &) applies to all the variables defined in a single statement. Part of the problem arises because we can put whitespace between the type modifier and the name being declared:

	int* p;  // legal but might be misleading

In the above stmt, "int" is base type. "*" is type modifier "p" identifier. *p is declarator

Pointers to Pointers:
---------------------

In general, there are no limits to how many type modifiers can be applied to a declarator. When there is more than one modifier, they combine in ways that are logical but not always obvious. As one example, consider a pointer. A pointer is an object in memory, so like any object it has an address. Therefore, we can store the address of a pointer in another pointer.

We indicate each pointer level by its own *. That is, we write ** for a pointer to a pointer, *** for a pointer to a pointer to a pointer, and so on:

	int ival = 1024;
	int *pi = &ival;    // pi points to an int
	int **ppi = &pi;    // ppi points to a pointer to an int

Here pi is a pointer to an int and ppi is a pointer to a pointer to an in

Just as dereferencing a pointer to an int yields an int, dereferencing a pointer to a pointer yields a pointer. To access the underlying object, we must dereference the original pointer twice:

	cout << "The value of ival\n"
	     << "direct value: " << ival << "\n"
	     << "indirect value: " << *pi << "\n"
	     << "doubly indirect value: " << **ppi
	     << endl;

This program prints the value of ival three different ways: first, directly; then, through the pointer to int in pi; and finally, by dereferencing ppi twice to get to the underlying value in ival

References to Pointers:
-----------------------

A reference is not an object. Hence, we may not have a pointer to a reference. However, because a pointer is an object, we can define a reference to a pointer:

	int i = 42;
	int *p;        // p is a pointer to int
	int *&r = p;   // r is a reference to the pointer p
	r = &i; //  r refers to a pointer; assigning &i to r makes p point to i
	*r = 0; //  dereferencing r yields i, the object to which p points; changes i to 0

The easiest way to understand the type of r is to read the definition right to left. The symbol closest to the name of the variable (in this case the & in &r) is the one that has the most immediate effect on the variable’s type. Thus, we know that r is a reference. The rest of the declarator determines the type to which r refers. The next symbol, * in this case, says that the type r refers to is a pointer type. Finally, the base type of the declaration says that r is a reference to a pointer to an int.

Const:
------

we can’t change the value of a const object after we create it, it must be initialized. As usual, the initializer may be an arbitrarily complicated expression:

	const int i = get_size();  // ok: initialized at run time
	const int j = 42;          // ok: initialized at compile time
	const int k;               // error: k is uninitialized const

When a const object is initialized from a compile-time constant, such as in our definition of bufSize:

const int bufSize = 512;    // input buffer size

the compiler will usually replace uses of the variable with its corresponding value during compilation. That is, the compiler will generate code using the value 512 in the places that our code uses bufSize

References to const:
--------------------

	const int ci = 1024;
	const int &r1 = ci;   // ok: both reference and underlying object are const
	r1 = 42;              // error: r1 is a reference to const
	int &r2 = ci;         // error: non const reference to a const object

Initialization and References to const:
---------------------------------------

In § 2.3.1 (p. 51) we noted that there are two exceptions to the rule that the type of a reference must match the type of the object to which it refers. The first exception is that we can initialize a reference to const from any expression that can be converted (§ 2.1.2, p. 35) to the type of the reference. In particular, we can bind a reference to const to a nonconst object, a literal, or a more general expression:

	int i = 42;
	const int &r1 = i;      // we can bind a const int& to a plain int object
	const int &r2 = 42;     // ok: r2 is a reference to const
	const int &r3 = r1 * 2; // ok: r3 is a reference to const
	int &r4 = r1 * 2;        // error: r4 is a plain, non const reference

The easiest way to understand this difference in initialization rules is to consider what happens when we bind a reference to an object of a different type:

double dval = 3.14;
const int &ri = dval;

Here ri refers to an int. Operations on ri will be integer operations, but dval is a floating-point number, not an integer. To ensure that the object to which ri is bound is an int, the compiler transforms this code into something like

const int temp = dval;   // create a temporary const int from the double
const int &ri = temp;    // bind ri to that temporary

In this case, ri is bound to a temporary object. A temporary object is an unnamed object created by the compiler when it needs a place to store a result from evaluating an expression. C++ programmers often use the word temporary as an abbreviation for temporary object.

Now consider what could happen if this initialization were allowed but ri was not const. If ri weren’t const, we could assign to ri. Doing so would change the object to which ri is bound. That object is a temporary, not dval. The programmer who made ri refer to dval would probably expect that assigning to ri would change dval. After all, why assign to ri unless the intent is to change the object to which ri is bound? Because binding a reference to a temporary is almost surely not what the programmer intended, the language makes it illegal.

Pointers and const:
-------------------

As with references, we can define pointers that point to either const or nonconst types. Like a reference to const, a pointer to const (§ 2.4.1, p. 61) may not be used to change the object to which the pointer points. We may store the address of a const object only in a pointer to const:

	const double pi = 3.14;   // pi is const; its value may not be changed
	double *ptr = &pi;        // error: ptr is a plain pointer
	const double *cptr = &pi; // ok: cptr may point to a double that is const
	*cptr = 42;               // error: cannot assign to *cptr

In § 2.3.2 (p. 52) we noted that there are two exceptions to the rule that the types of a pointer and the object to which it points must match. The first exception is that we can use a pointer to const to point to a nonconst object:

	double dval = 3.14;       // dval is a double; its value can be changed
	cptr = &dval;             // ok: but can't change dval through cptr

const pointers:
---------------

Unlike references, pointers are objects. Hence, as with any other object type, we can have a pointer that is itself const. Like any other const object, a const pointer must be initialized, and once initialized, its value (i.e., the address that it holds) may not be changed. We indicate that the pointer is const by putting the const after the *. This placement indicates that it is the pointer, not the pointed-to type, that is const:

	int errNumb = 0;
	int *const curErr = &errNumb;  // curErr will always point to errNumb
	const double pi = 3.14159;
	const double *const pip = &pi; // pip is a const pointer to a const object

As we saw in § 2.3.3 (p. 58), the easiest way to understand these declarations is to read them from right to left. In this case, the symbol closest to curErr is const, which means that curErr itself will be a const object. The type of that object is formed from the rest of the declarator. The next symbol in the declarator is *, which means that curErr is a const pointer. Finally, the base type of the declaration completes the type of curErr, which is a const pointer to an object of type int. Similarly, pip is a const pointer to an object of type const double.

The fact that a pointer is itself const says nothing about whether we can use the pointer to change the underlying object. Whether we can change that object depends entirely on the type to which the pointer points. For example, pip is a const pointer to const. Neither the value of the object addressed by pip nor the address stored in pip can be changed. On the other hand, curErr addresses a plain, nonconst int. We can use curErr to change the value of errNumb:

	*pip = 2.72;     // error: pip is a pointer to const
	// if the object to which curErr points (i.e., errNumb) is nonzero
	if (*curErr) {
	    errorHandler();
	    *curErr = 0; // ok: reset the value of the object to which curErr is bound
	}

As we’ve seen, a pointer is an object that can point to a different object. 
As a result, we can talk independently about whether a pointer is const and whether the objects to which it can point are const. 
We use the term top-level const to indicate that the pointer itself is a const. 
When a pointer can point to a const object, we refer to that const as a low-level const.

	TopLevel const pointer:			int* const cpi;
	LowLevel const pointer:			const int* cpi;
	TopLevel and LowLevel const pointers:	const int* const tlcpi;

More generally, top-level const indicates that an object itself is const. Top-level const can appear in any object type, i.e., one of the built-in arithmetic types, a class type, or a pointer type. Low-level const appears in the base type of compound types such as pointers or references. 
Note that pointer types, unlike most other types, can have both top-level and low-level const independently

	int i = 0;
	int *const p1 = &i;  // we can't change the value of p1; const is top-level
	const int ci = 42;   // we cannot change ci; const is top-level
	const int *p2 = &ci; // we can change p2; const is low-level
	const int *const p3 = p2; // right-most const is top-level, left-most is not
	const int &r = ci;  // const in reference types is always low-level

The distinction between top-level and low-level matters when we copy an object. When we copy an object, top-level consts are ignored:

	i = ci;  // ok: copying the value of ci; top-level const in ci is ignored
	p2 = p3; // ok: pointed-to type matches; top-level const in p3 is ignored

Copying an object doesn’t change the copied object. As a result, it is immaterial whether the object copied from or copied into is const.

On the other hand, low-level const is never ignored. When we copy an object, both objects must have the same low-level const qualification or there must be a conversion between the types of the two objects. In general, we can convert a nonconst to const but not the other way round

	int *p = p3; // error: p3 has a low-level const but p doesn't
	p2 = p3;     // ok: p2 has the same low-level const qualification as p3
	p2 = &i;     // ok: we can convert int* to const int*
	int &r = ci; // error: can't bind an ordinary int& to a const int object
	const int &r2 = i; // ok: can bind const int& to plain int

p3 has both a top-level and low-level const. When we copy p3, we can ignore its top-level const but not the fact that it points to a const type. 
Hence, we cannot use p3 to initialize p, which points to a plain (nonconst) int. On the other hand, we can assign p3 to p2. Both pointers have the same (low-level const) type. 
The fact that p3 is a const pointer (i.e., that it has a top-level const) doesn’t matter.

constexpr and Constant Expressions:
-----------------------------------

A constant expression is an expression whose value cannot change and that can be evaluated at compile time
										 -------------------------
A literal is a constant expression. A const object that is initialized from a constant expression is also a constant expression. As we’ll see, there are several contexts in the language that require constant expressions.
Whether a given object (or expression) is a constant expression depends on the types and the initializers

	const int max_files = 20;    // max_files is a constant expression
	const int limit = max_files + 1; // limit is a constant expression
	int staff_size = 27;       // staff_size is not a constant expression
	const int sz = get_size(); // sz is not a constant expression

constexpr variables: // C++11
--------------------

Under the new standard, we can ask the compiler to verify that a variable is a constant expression by declaring the variable in a constexpr declaration.
Variables declared as constexpr are implicitly const and must be initialized by constant expressions

	constexpr int mf = 20;        // 20 is a constant expression
	constexpr int limit = mf + 1; // mf + 1 is a constant expression
	constexpr int sz = size();    // ok only if size is a constexpr function

Although we cannot use an ordinary function as an initializer for a constexpr variable, we’ll see in § 6.5.2 (p. 239) that the new standard lets us define certain functions as constexpr.
Such functions must be simple enough that the compiler can evaluate them at compile time. We can use constexpr functions in the initializer of a constexpr variable

Literal Types:
--------------

Because a constant expression is one that can be evaluated at compile time, there are limits on the types that we can use in a constexpr declaration.
The types we can use in a constexpr are known as “literal types” because they are simple enough to have literal values.
Of the types we have used so far, the arithmetic, reference, and pointer types are literal types.

Although we can define both pointers and reference as constexprs, the objects we use to initialize them are strictly limited.
We can initialize a constexpr pointer from the nullptr literal or the literal (i.e., constant expression) 0. We can also point to (or bind to) an object that remains at a fixed address
For reasons we’ll cover in § 6.1.1 (p. 204), variables defined inside a function ordinarily are not stored at a fixed address. Hence, we cannot use a constexpr pointer to point to such variables.
On the other hand, the address of an object defined outside of any function is a constant expression, and so may be used to initialize a constexpr pointer.
We’ll see in § 6.1.1 (p. 205), that functions may define variables that exist across calls to that function. Like an object defined outside any function, these special local objects also have fixed addresses.
Therefore, a constexpr reference may be bound to, and a constexpr pointer may address, such variables

Pointers and constexpr:
-----------------------

It is important to understand that when we define a pointer in a constexpr declaration, the constexpr specifier applies to the pointer, not the type to which the pointer points:

	const int *p = nullptr;     // p is a pointer to a const int
	constexpr int *q = nullptr; // q is a const pointer to int

Despite appearances, the types of p and q are quite different; p is a pointer to const, whereas q is a constant pointer.
The difference is a consequence of the fact that constexpr imposes a top-level const (§ 2.4.3, p. 63) on the objects it defines.

Like any other constant pointer, a constexpr pointer may point to a const or a nonconst type:

	constexpr int *np = nullptr; // np is a constant pointer to int that is null
	int j = 0;
	constexpr int i = 42;  // type of i is const int
	// i and j must be defined outside any function
	constexpr const int *p = &i; // p is a constant pointer to the const int i
	constexpr int *p1 = &j;      // p1 is a constant pointer to the int j

Type Aliases:
-------------

A type alias is a name that is a synonym for another type.
Type aliases let us simplify complicated type definitions, making those types easier to use.
Type aliases also let us emphasize the purpose for which a type is used.

We can define a type alias in one of two ways. Traditionally, we use a typedef:

	typedef double wages;   // wages is a synonym for double
	typedef wages base, *p; // base is a synonym for double, p for double*

The keyword typedef may appear as part of the base type of a declaration (§ 2.3, p. 50).
Declarations that include typedef define type aliases rather than variables.
As in any other declaration, the declarators can include type modifiers that define compound types built from the base type of the definition.

C++11 has introduced a 2nd way of defining a type alias, via an alias declaration.

	using SI = Sales_item;	// SI is a synonym for Sales_item
	SI item;		// Same as Sales_item item

The alias declaration defines the name on the left hand side of the "=" as an alias for the type that appears on the right hand side

Pointers, const and Type Aliases:
---------------------------------

Declarations that use type aliases that represent compound types and const can yield surprising results.
For example, the following declarations use the type pstring, which is an alias for the the type char*:

	typedef char *pstring;
	const pstring cstr = 0; // cstr is a constant pointer to char
	const pstring *ps;      // ps is a pointer to a constant pointer to char

The base type in these declarations is const pstring. As usual, a const that appears in the base type modifies the given type.
The type of pstring is “pointer to char.” So, const pstring is a constant pointer to char—not a pointer to const char.

It can be tempting, albeit incorrect, to interpret a declaration that uses a type alias by conceptually replacing the alias with its corresponding type:

	const char *cstr = 0; // wrong interpretation of const pstring cstr

However, this interpretation is wrong. When we use pstring in a declaration, the base type of the declaration is a pointer type.
When we rewrite the declaration using char*, the base type is char and the * is part of the declarator. In this case, const char is the base type.
This rewrite declares cstr as a pointer to const char rather than as a const pointer to char.










References/Further Reading:
---------------------------

https://learning.oreilly.com/playlists/3b5aa7fb-ecc1-4356-8586-9c3251f58aee
https://learning.oreilly.com/library/view/learning-object-oriented-programming/9781785289637/
https://learning.oreilly.com/library/view/head-first-design/9781492077992
https://en.cppreference.com/w/cpp/11
https://www.cplusplus.com/reference/
https://en.cppreference.com/w/
https://www.geeksforgeeks.org/c-plus-plus/?ref=shm
https://docs.microsoft.com/en-us/cpp/cpp/?view=msvc-170
https://www.javatpoint.com/cpp-tutorial

Boost Library:
--------------

https://www.boost.org/doc/libs/
https://theboostcpplibraries.com/
https://www.geeksforgeeks.org/advanced-c-boost-library/

Coding Practise Sites:
----------------------

codeforces
leetcode
codechef
atcoder

