https://learning.oreilly.com/library/view/c-primer-fifth

echo $? on UNIX
echo %ERRORLEVEL%% on Windows

g++ -o Hello HelloWorld.cpp node.cpp -Wall -std=c++0x		// C++ 11

iostream -> 1 istream and 3 ostream objects
	cin - istream
	cout - ostream
	cerr - ostream
	clog - ostream

>> & << are input and output operators
endl is manipulator also responsible for flushing the buffer to ostream along with ending the current line

Namespaces allow us to avoid inadvertant collisions between the names we define and uses of those same names inside library. All the name defined by the standard library are in the std namespace

:: -> scope operator

A block is a sequence of zero or more statments enclosed by curly braces

+= -> Compound Assignment operator

CTRL + d -> End of File in UNIX
CTRL + z -> End of File in Windows

./bookstore <infile >outfile

"."	->	Dot Operator
() 	->	Call Operator

Primitive Data types:

	Characters, integers, boolean, floating point numbers etc.,
	and special type called void

	Arithmetic types are divided into 2 categories: integral types (which include character and boolean)
	and floating-point types

Type			Meaning					Size

bool			boolean					NA
char			character				8 bits
wchar_t			wide character				16 bits
char16_t		Unicode Character			16 bits
char32_t		Unicode Character			32 bits
short			Short integer				16 bits
int			integer					32 bits (min 16 bits)
long			long integer				64 bits (min 32 bits)
long long		long integer				64 bits
float			single-precision floating-point		6 significant digits (32 bits)
double			double-precision floating point		10 significant digits (64 bits)
long double		extended-precision floating point	10 significant digits (128 bits)

Literals:

The type of string literal is array of constant char s

// multiline string literal
std::cout << "a really, really long string literal "
             "that spans two lines" << std::endl;

The language defines several escape sequences:

newline            \n     horizontal tab      \t     alert (bell)       \a
vertical tab       \v     backspace          \b     double quote  \"
backslash         \\     question mark     \?     single quote    \'
carriage return   \r     formfeed            \f

We can also write a generalized escape sequence, which is \x followed by one or more hexadecimal digits or a \ followed by one, two, or three octal digits. The value represents the numerical value of the character. Some examples (assuming the Latin-1 character set):

\7 (bell)    \12 (newline)      \40 (blank)
\0 (null)    \115 ('M')         \x4d ('M')

As with an escape sequence defined by the language, we use these escape sequences as we would any other character:

std::cout << "Hi \x4dO\115!\n";  // prints Hi MOM! followed by a newline
std::cout << '\115' << '\n';     // prints M followed by a newline

Specifying the type of a literal:

We can override the default type of an integer, floating- point, or character literal by supplying a suffix or prefix

L'a'     // wide character literal, type is wchar_t
u8"hi!"  // utf-8 string literal (utf-8 encodes a Unicode character in 8 bits)
42ULL    // unsigned integer literal, type is unsigned long long
1E-3F    // single-precision floating-point literal, type is float
3.14159L // extended-precision floating-point literal, type is long double

We can independently specify the signedness and size of an integral literal. If the suffix contains a U, then the literal has an unsigned type, so a decimal, octal, or hexadecimal literal with a U suffix has the smallest type of unsigned int, unsigned long, or unsigned long long in which the literal’s value fits. If the suffix contains an L, then the literal’s type will be at least long; if the suffix contains LL, then the literal’s type will be either long long or unsigned long long. We can combine U with either L or LL. For example, a literal with a suffix of UL will be either unsigned long or unsigned long long, depending on whether its value fits in unsigned long.


--------------------------------------

Inheritance (Public vs Private)
Virtual Functions
Friends
Abstract Classes
STL

--------------------------------------
